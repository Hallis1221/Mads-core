// TODO implement isr

import { gql } from "graphql-request";
import Head from "next/head";
import Image from "next/image";
import { ReactElement, useEffect, useState } from "react";
import Countdown from "react-countdown";
import { correctPassword } from "../../bones/auth";
import { gqc } from "../../bones/network/client";
import MainAd from "../../components/ad";

const contentQuery = gql`
  query Query($getContentId: ID!) {
    getContent(id: $getContentId) {
      theme
      tags {
        tag
      }
      title
      link
      id
      owner {
        displayName
      }
    }
  }
`;

const findadQuery = gql`
  query Query($input: FindAdInput) {
    findAd(input: $input) {
      title
      link
      image
      video
      type
      owner {
        displayName
      }
      id
    }
  }
`;

const regView = gql`
  mutation Mutation($adId: ID!, $contentId: ID!) {
    registerViews(adID: $adId, contentID: $contentId)
  }
`;

const contentIDs = gql`
  query Query($input: PasswordInput) {
    getContents(input: $input) {
      id
    }
  }
`;

function AdPage(props: any): ReactElement {
  const ad = props.ad;
  const content = props.content;
  const [isDone, setIsDone] = useState(false);

  useEffect(() => {
    if (ad.id && content.id)
      gqc.request(regView, {
        adId: ad.id,
        contentId: content.id,
      });
  }, [ad.id, content.id]);

  if (!ad || !content) return <div>Ad not found</div>;

  let link = ad.link;
  if (ad.type == "video") link = undefined;
  // TODO Warning: Cannot update a component (`AdPage`) while rendering a different component (`Countdown$1`). To locate the bad setState() call inside `Countdown$1`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render

  return (
    <div className="py-0 px-0">
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="min-h-screen py-8 flex-1 flex flex-col">
        <div className="items-end justify-start flex px-8">
          <Image
            src="/mads.svg"
            alt="Vercel Logo"
            width={300 * 0.3}
            height={128 * 0.3}
          />
        </div>
        <div className="flex items-center flex-wrap flex-col relative pt-56 lg:relative lg:pt-14 md:pt-40">
          <div className="m-4 ml-0 mr-0 mt-0 p-0 pt-0 flex flex-col text-inherit border-2 border-solid border-gray-300 border-opacity-60 rounded-xl transition-colors duration-200 ease hover:text-blue-600 hover:border-blue-600 focus:text-blue-600 focus:border-blue-600 active:border-blue-600 active:text-blue-600">
            <MainAd ad={ad} content={content} setIsDone={setIsDone} />

            <div className="flex flex-row p-4 pt-2 pb-3 text-left justify-between">
              <p className="justify-start">
                <div className="absolute hidden lg:block lg:relative xl:block xl:relative">
                  Currently viewing {ad.title} by {ad.owner.displayName}
                </div>
                <div className="absolute hidden md:block md:relative lg:hidden lg:relative xl:hidden xl:relative ">
                  {" "}
                  {ad.title} by {ad.owner.displayName}
                </div>
                <div className="relative block md:hidden md:absolute lg:hidden lg:absolute xl:hidden xl:absolute">
                  {ad.title}
                </div>
              </p>

              <Countdown
                date={Date.now() + 5000}
                precision={1}
                intervalDelay={1000}
                className=""
                renderer={(props) => {
                  if (isDone)
                    return (
                      <a href={content.link} className="text-xl font-bold ">
                        Skip
                      </a>
                    );
                  if (ad.type === "video" && !isDone)
                    return (
                      <a href={content.link} className="text-xl font-bold ">
                        Waiting...
                      </a>
                    );
                  if (props.api.isCompleted()) {
                    setIsDone(true);
                  }

                  if (props.seconds > 0)
                    return (
                      <a
                        className="text-xl font-bold"
                        onClick={() => {
                          console.log("Hi");
                        }}
                      >
                        {props.seconds}
                      </a>
                    );

                  if (isDone)
                    return (
                      <a href={content.link} className="text-xl font-bold ">
                        Skip
                      </a>
                    );
                  return <a className="text-xl font-bold ">Loading...</a>;
                }}
              />
            </div>
          </div>
        </div>
      </main>

      <footer className="flex flex-1 py-8 px-0 border-t-2 border-solid border-gray-300 justify-center items-center">
        <a target="_blank" href="https://vercel.com" rel="opener noreferrer">
          Made with ❤️ and a fck ton of monster
        </a>
      </footer>
    </div>
  );
}
export default AdPage;

export async function getStaticProps({ params }: any) {
  const { id } = params;
  let content;
  let ad;

  try {
    content = (
      await gqc.request(contentQuery, {
        getContentId: id,
      })
    ).getContent;

    let tags = content.tags.map((tag: { tag: any }) => tag.tag);
    let theme = content.theme;

    ad = (
      await gqc.request(findadQuery, {
        input: {
          tags,
          theme,
        },
      })
    ).findAd;
  } catch (error) {
    return { notFound: true };
  }

  return {
    props: {
      ad,
      content,
    },
    revalidate: 1200,
  };
}

export async function getStaticPaths() {
  var ids: { getContents: { id: string }[] };

  ids = await gqc.request(contentIDs, {
    input: {
      password: correctPassword,
    },
  });

  const paths = ids.getContents.map((id: { id: string }) => ({
    params: {
      id: id.id,
    },
  }));

  return {
    paths,
    fallback: "blocking",
  };
}
