import { gql } from "graphql-request";
import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { useRouter } from "next/router";
import { ReactElement } from "react";
import Countdown from "react-countdown";
import { client, setHost } from "../../bones/network";

const contentQuery = gql`
  query Query($getContentId: ID!) {
    getContent(id: $getContentId) {
      theme
      tags {
        tag
      }
      title
      link
      owner {
        displayName
      }
    }
  }
`;

const findadQuery = gql`
  query Query($input: FindAdInput) {
    findAd(input: $input) {
      title
      link
      image
      owner {
        displayName
      }
      id
    }
  }
`;

const regView = gql`
  mutation RegisterAdView($registerAdViewId: ID!) {
    registerAdView(id: $registerAdViewId)
  }
`;

function AdPage(props: any): ReactElement {
  const ad = props.ad;
  const content = props.content;
  console.log(ad.id)

  client.request(regView, { registerAdViewId: ad.id }).catch(err => {
    // !! TODO: handle error, tho it's not critical as it dosnt appear to affect anything
    console.log(err);
  });
  // TODO check for other types of ads

  return (
    <div className="py-0 px-8">
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="min-h-screen py-8 px-0 flex-1 flex flex-col">
        <div className="items-end justify-start flex">
          <Image
            src="/mads.svg"
            alt="Vercel Logo"
            width={300 * 0.3}
            height={128 * 0.3}
          />
        </div>
        <div className="flex items-center flex-wrap flex-col absolute pt-56 lg:relative lg:pt-14 md:pt-40 ">
          <a className="m-4 mt-0 p-0 pt-0 flex flex-col text-inherit border-2 border-solid border-gray-300 border-opacity-60 rounded-xl transition-colors duration-200 ease hover:text-blue-600 hover:border-blue-600 focus:text-blue-600 focus:border-blue-600 active:border-blue-600 active:text-blue-600">
            <a href={ad.link}>
              <Image
                src={ad.image}
                alt="Deploy"
                height={630 * 1.2}
                width={1200 * 1.2}
                layout="intrinsic"
                className="rounded-xl h-full"
              />
            </a>
            <div className="flex flex-row p-4 pt-2 pb-3 text-left justify-between">
              <p className="justify-start">
                Currently viewing {ad.title} by {ad.owner.displayName}
              </p>
              <Countdown
                date={Date.now() + 5000}
                precision={1}
                intervalDelay={1000}
                className=""
                renderer={(props) => {
                  if (props.seconds > 0) {
                    return (
                      <a
                        className="text-xl font-bold"
                        onClick={() => {
                          console.log("Hi");
                        }}
                      >
                        {props.seconds}
                      </a>
                    );
                  }

                  return (
                    <a href={content.link} className="text-xl font-bold ">
                      Skip
                    </a>
                  );
                }}
              />
            </div>
          </a>
        </div>
      </main>

      <footer className="flex flex-1 py-8 px-0 border-t-2 border-solid border-gray-300 justify-center items-center">
        <a target="_blank" href="https://vercel.com" rel="opener noreferrer">
          Made with ❤️ and a fck ton of monster
        </a>
      </footer>
    </div>
  );
}

AdPage.getInitialProps = async (context: any) => {
  const { req, query, props } = context;
  if (req) setHost(req.headers.host);

  let ad = props?.ad;
  let content = query?.content;

  if (!ad || !content) {
    content = (
      await client.request(contentQuery, {
        getContentId: query.id,
      })
    ).getContent;

    let tags = content.tags.map((tag: { tag: any }) => tag.tag);
    let theme = content.theme;

    ad = (
      await client.request(findadQuery, {
        input: {
          tags,
          theme,
        },
      })
    ).findAd;
  }
  return { ad, content };
};
export default AdPage;
